title: In with the new
code-theme: blackboard
css_class: blackboard

h1. Who am I?

<center>
!images/code_monkey.jpg!
</center>

h1. Where do I hail from?

<center>
!images/road_warrior.jpg!
</center>

h1. What do we do?

<center>
!images/question.jpg!
</center>

h1. What kind of stuff do I work with?

<center>
!images/python.gif!
!images/ruby.gif!
!images/php.gif!
!images/vmware.gif!
!images/rails.png!
!images/django.gif!
!images/jquery.gif!
!images/node.png!
!images/mongodb.png!
!images/redis.gif!
</center>

h1. What is this talk about?

!images/what.png!

h1. What is this talk about?

h2. continued

<p>&nbsp;</p>

<ul>
<li>Distributed Version Control</li>
<li>NoSQL</li>
<li>Web Frameworks</li>
<li>Event Driven Servers</li>
<li>Message Queue Servers</li>
</ul>

h1. Not "out with the old"

<center>
!images/hulk.jpg!
</center>

h1. Do I actually use any of this stuff?

<center>
!images/wrench.jpg!
</center>

h1. You better believe it!

<center>
!images/git-logo.png!
</center>

h1. Distributed Version Control

<center>
!images/distributed.gif!
</center>

h1. Version Control

h2. Overview

<center>
!images/source_code.jpg!
</center>

h1. Overview

h2. RCS

<center>
!images/rcs.png!
</center>


h1. Centralized version control systems

  * CVS
  * Subversion
  * ClearCase
  * Perforce
  * Visual Studio Team System

h1. Centralized Model

<center>
!images/traditional_vc.png!
</center>

h1. Characteristics

<center>
!images/dumbo.png!
</center>

h1. One master

<center>
!images/master.jpg!
</center>

h1. All collaborators work on the same repository

<center>
!images/collaborators.jpg!
</center>

h1. Network is required for most operations

<center>
!images/internet.jpg!
</center>

h1. Centralized Model

<center>
!images/traditional_vc.png!
</center>

h1. Distributed Model

<center>
!images/distributed_vc.png!
</center>

h1. History

<center>
!images/history.jpg!
</center>

h1. History

h3. The slogan of Subversion for a while was "CVS done right", or something like that, and if you start with that kind of slogan, there's nowhere you can go. There is no way to do CVS right.

Linus Torvalds

h1. Distributed version control systems

  * Git
  * Mercurial
  * Bazaar
  * Darcs
  * Bitkeeper
  * Arch - not in active development

h1. Tangent - Github

<center>
!images/github.png!
</center>

h1. Distributed Model

<center>
!images/distributed_vc.png!
</center>

h1. Characteristics

<center>
!images/dumbo.png!
</center>

h1. Multiple "masters"

<center>
!images/masters.jpg!
</center>

h1. Everyone works on their own copy of the repository

<p>&nbsp;</p>

<center>
!images/everymanforhimself.jpg!
</center>

h1. No network needed

<center>
!images/nonetwork.jpg!
</center>

h1. It's not too late, convert today!

<center>
!images/conversion.jpg!
</center>

h1. No platform left behind

<center>
!images/linux.jpg!
!images/osx.jpg!

!images/windows.jpg!
!images/bsd.jpg!
</center>

h1. Command line utils

<center>
!images/commandline.png!
</center>

h1. GUI utils

<center>
!images/tortoise.jpg!
</center>

h1. Tangent - Tortoise

<center>
!images/tortoise.png!
!images/gnu.jpg!
</center>

h1. Cryptographic history

<center>
!images/crypto.png!
</center>

h1. Cryptographic history

h3. 6ff87c4664981e4397625791c8ea3bbb5f2279a3

h1. Blob storage

<center>
!images/blob.jpg!
</center>

h1. Blob storage

<% code do %>$ git ls-tree fb3a8bdd0ce
100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore
100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap
100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING
040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation
100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN
100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL
100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile
100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README
<% end %>

h1. Non-linear development

h2. Simplified branching/merging

<p>&nbsp;</p>

<center>
!images/branching.png!
</center>

h1. Branch like it's 1999!

<center>
!images/gitk.png!
</center>

h1. Why you should consider DVCS

<center>
!images/consider.jpg!
</center>

h1. Redundancy

<center>
!images/redundant.jpg!
</center>

h1. No network needed

<p>&nbsp;</p>

<center>
!images/failwhale.gif!
</center>

h1. Encourages commits

<center>
!images/hardwork.jpg!
</center>

h1. Private work environment

<center>
!images/privacy.jpg!
</center>

h1. Still can have an "official" repo

<center>
!images/enforce.jpg!
</center>

h1. Great for large projects

<center>
!images/large.jpg!
</center>

h1. Why you might not consider DVCS

<center>
!images/rejected.jpg!
</center>

h1. Centralized systems are getting some of the same features

<center>
!images/steal.jpg!
</center>

h1. Easier to enforce an "official" repo

<center>
!images/official.jpg!
</center>

h1. Can't or won't allow personal copies of repos

<center>
!images/noprivate.jpg!
</center>

h1. Links

 * "Distributed revision control system(wikipwedia)":http://en.wikipedia.org/wiki/Distributed_revision_control_system
 * "Pro Git book":http://progit.org/book/
 * "Linus Torvalds on Git":http://www.youtube.com/watch?v=4XpnKHJAok8
 * "Github":http://github.com/
 * "Bitbucket":https://bitbucket.org/

!SLIDE

<p>&nbsp;</p>

<center>
!images/nosql.png!
</center>

h1. What is NOSQL?

<center>
!images/what.png!
</center>

h1. Buzzword

<center>
!images/bee.jpg!
</center>

h1. Flexible table schema

<center>
!images/database.jpg!
</center>

h1. History

<center>
!images/history.jpg!
</center>

h1. The beginning-ish

<center>
!images/memcached.gif!
</center>

h1. Common types

<center>
!images/common.jpg!
</center>

h1. Key-value

<center>
!images/key.jpg!
</center>

h1. Key-value

h2. Software

 * MemcacheDB
 * Tokyo Cabinet
 * Redis
 * Amazon SimpleDB

h1. Document oriented

<center>
!images/documents.jpg!
</center>

h1. Document oriented

h2. Software

 * MongoDB
 * CouchDB
 * RavenDB

h1. Column oriented

<center>
!images/column.jpg!
</center>

h1. Column oriented

h2. Software

 * LucidDB
 * MonetDB
 * Google BigTable (sort of)

h1. Characteristics

<center>
!images/dumbo.png!
</center>

h1. Flexible schema

<center>
!images/morph.jpg!
</center>

h1. Write heavy

<center>
!images/pencil.jpg!
</center>

h1. Horizontal scalability

<center>
!images/horizontal.jpg!
</center>

h1. Distributed

<center>
!images/distributed.gif!
</center>

h1. Non-SQL query interface

<center>
!images/join.jpg!
</center>

h1. Weak/eventual consistency

<center>
!images/consistent.jpg!
</center>

h1. Why you should consider NoSQL

<center>
!images/consider.jpg!
</center>

h1. Performance

<center>
!images/performance.jpg!
</center>

h1. Scalability

<center>
!images/scalable.jpg!
</center>

h1. (auto)Sharding

<center>
!images/sharding.jpg!
</center>

h1. Simplified replication

<center>
!images/replicant.jpg!
</center>

h1. Why you might not consider NoSQL

<center>
!images/rejected.jpg!
</center>

h1. Need complex joins/business logic

<center>
!images/joins.jpg!
</center>

h1. Need ODBC

<center>
!images/odbc.jpg!
</center>

h1. Weak/eventual consistency

<center>
!images/consistency.jpg!
</center>

h1. Doesn't fit

<center>
!images/fit.jpg!
</center>

h1. Links

 * "http://nosql-database.org/":http://nosql-database.org/
 * "http://www.mongodb.org/":http://www.mongodb.org/
 * "http://couchdb.apache.org/":http://couchdb.apache.org/
 * "http://code.google.com/p/redis/":http://code.google.com/p/redis/
 * "http://memcachedb.org/":http://memcachedb.org/

h1. Web frameworks

<center>
!images/wordle.png!
</center>

h1. Design philosophy

<center>
!images/design.jpg!
</center>

h1. DRY

 * Don't

 * Repeat

 * Yourself

h1. DIE

 * Duplication

 * Is

 * Evil

h1. MVC

<center>
!images/mvc.png!
</center>

h1. History

<center>
!images/history.jpg!
</center>

h1. The beginning

<center>
!images/xerox.jpg!
</center>

h1. ORM

 * Object

 * Relational

 * Mapping

h1. ORM

h2. Abstraction over data

<center>
!images/orm.jpg!
</center>

h1. ORM

h2. No SQL statements(mostly)

Instead of your code looking like this

<% code do %>res = mysql.query("SELECT * FROM PEOPLE")
res.each do |row|
  puts row['first_name'] + " " + row['last_name']
end
<% end %>

It will look something like this

<% code do %>people = Person.find(:all)

people.each do |person|
  puts person.first_name + " " + person.last_name
end
<% end %>

h1. ORM

h2. Inserts

Instead of your code looking like this

<% code do %>mysql.query("INSERT INTO people(first_name, last_name)
  VALUES ('Schmoe', 'Joe')");
<% end %>

It will look something like this

<% code do %>Person.create({:first_name => 'Joe', :last_name => 'Schmoe'})
<% end %>

h1. Templating

<center>
!images/erb.png!
</center>

h1. What is MVC?

<center>
!images/mvc.png!
</center>

h1. Model

<center>
!images/data.jpg!
</center>

h1. Model

h2. Data

<center>
!images/matrix.jpg!
</center>

h1. Model

h2. Business logic

<% code do %>
class Album < ActiveRecord::Base
    has_many :tracks
end

class Track < ActiveRecord::Base
    belongs_to :album
end

album = Album.create(:title => 'Black and Blue',
    :performer => 'The Rolling Stones')
album.tracks.create(:track_number => 1, :title => 'Hot Stuff')

album = Album.create(:title => 'Sticky Fingers',
    :performer => 'The Rolling Stones')
album.tracks.create(:track_number => 1, :title => 'Brown Sugar')

puts Album.find_by_title('Sticky Fingers').title  # Sticky Fingers
puts Track.find_by_title('Hot Stuff').album_id    # 1
<% end %>

h1. View

<center>
!images/surfin.jpg!
</center>

h1. View

h2. Presentation

<center>
!images/optimus.jpg!
</center>

h1. View

h2. “The Web”

<center>
!images/website.jpg!
</center>

h1. Controller

<center>
!images/vader.jpg!
</center>

h1. Controller

h2. The tie that binds

<center>
!images/controller.jpg!
</center>

h1. Controller

h2. Flow control

<center>
!images/flow.jpg!
</center>

h1. Web *slash* MVC frameworks

 * Rails
 * ASP.NET MVC
 * Django
 * CakePHP
 * CodeIgniter
 * Limonade

h1. What do these buy you?

<center>
!images/money.jpg!
</center>

h1. Heavy lifting

<center>
!images/loader.png!
</center>

h1. Heavy lifting

h2. Example

<% code do %>ray@itconf:~$ rails new my_sweet_web_app
      create
      create  README
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/views/layouts/application.html.erb
      create  app/models
      create  config
      create  db
      create  db/seeds.rb
      create  doc
      create  doc/README_FOR_APP
      create  lib
      create  lib/tasks
      create  lib/tasks/.gitkeep
      ...
      create  vendor/plugins
      create  vendor/plugins/.gitkeep
ray@itconf:~$
<% end %>

h1. Heavy lifting

h2. App structure

<% code do %>.
├── app
│   ├── controllers
│   ├── helpers
│   ├── models
│   └── views
├── config
├── config.ru
├── db
│   └── seeds.rb
├── Gemfile
├── lib
│   └── tasks
├── Rakefile
├── README
├── script
│   └── rails
├── tmp
│   ├── cache
│   ├── pids
│   ├── sessions
│   └── sockets
└── vendor
    └── plugins

<% end %>

h1. A circle of trust

h2. Not really, it's just an expression

<center>
!images/trust.jpg!
</center>

h1. Flexibility

<center>
!images/flex.jpg!
</center>

h1. Time

<center>
!images/time.jpg!
</center>

h1. Time

h2. Code Reuse(DRY)

<center>
!images/cp.jpg!
</center>

h1. Time

h2. Code Reuse(Plugins)

<center>
!images/plugins.jpg!
</center>

h1. Time

h2. Conventions

<center>
!images/difficulties.jpg!
</center>

h1. Why you should consider web frameworks

<center>
!images/consider.jpg!
</center>

h1. Do more with less

<center>
!images/more.jpg!
</center>

h1. Plugin architecture

<center>
!images/plugin.png!
</center>

h1. Standards Compliance

h2. With less headaches

<center>
!images/acid.png!
</center>

h1. Great community

<center>
!images/party.jpg!
</center>

h1. Why you might not consider web frameworks

<center>
!images/rejected.jpg!
</center>

h1. They meddle too much for your tastes

<center>
!images/meddle.jpg!
</center>

h1. Magic

<center>
!images/magic.jpg!
</center>

h1. Unicorns

<center>
!images/unicorn.jpg!
</center>

h1. Magic Ponies

<center>
!images/pony.png!
</center>

h1. Learning curve

<center>
!images/curves.jpg!
</center>

h1. Work flow

<center>
!images/work.jpg!
</center>

h1. Concerns about lock-in

<center>
!images/lockin.jpg!
</center>

h1. JavaScript frameworks

<center>
!images/js.png!
</center>

h1. W3C

<center>
!images/keys.jpg!
</center>

h1. ECMAScript/JavaScript

<center>
!images/js.jpg!
</center>

h1. DOM

<center>
!images/html.svg!
</center>

h1. Browser Wars

<center>
!images/browser-war.png!
</center>

h1. Unobtrusive Javascript

<center>
!images/vr.jpg!
</center>

h1. Unobtrusive JavaScript

h2. Accessibility

The "obtrusive" way:

<% code do %><script language="javascript">
function doSomething(){
	// Do something here!
	alert('You did something, woo hoo!');
});
</script>

<a onclick="doSomething()" href="#">Click!</a><% end %>

h1. I should probably stop doing that

<center>
!images/nuke.jpg!
</center>

h1. Unobtrusive JavaScript

h2. Unobtrusive scripting

The unobtrusive way:

<% code do %><a href="backuplink.html" class="doSomething">Click!</a>

<script language="javascript">$('a.doSomething').click(function(){
	// Do something here!
	alert('You did something, woo hoo!');
});
</script><% end %>

h1. JavaScript

h2. Degrade gracefully

<center>
!images/degrade.gif!
</center>

h1. Browser Wars

<center>
!images/browser-war.png!
</center>

h1. JavaScript

h2. Compatibility

!images/modernizer.png!

<% code do %>.multiplebgs div p {
  /* properties for browsers that
     support multiple backgrounds */
}
.no-multiplebgs div p {
  /* optional fallback properties
     for browsers that don't */
}<% end %>

<% code do %>if (Modernizr.video && Modernizr.video.ogg){
  // preload ogg video assets
} else if (Modernizr.video && Modernizr.video.h264){
  // preload h264 assets
}<% end %>

h1. Cross browser

<center>
!images/browsers.jpg!
</center>

h1. Tangent - John Resig jQuery creator

h2. Cross browser

<center>
!images/resig.jpg!
</center>

h1. JavaScript

h2. Rich interfaces

<center>
!images/rich.png!
</center>

h1. Javascript frameworks

 * jQuery
 * Prototype
 * ExtJS
 * Mootools
 * Modernizr

h1. Event driven architectures

<center>
!images/io.jpg!
</center>

h1. c10k Problem

<center>
!images/crowd.jpg!
</center>

h1. c10k Problem

h5. Let's see - at 20000 clients, that's 50KHz, 100Kbytes, and 50Kbits/sec per client. It shouldn't take any more horsepower than that to take four kilobytes from the disk and send them to the network once a second for each of twenty thousand clients.

~ Dan Kegel

"http://www.kegel.com/c10k.html":http://www.kegel.com/c10k.html

h1. Threads occupy resources...

<center>
!images/occupied.jpg!
</center>

h1. ...even if they are just waiting around

<center>
!images/waiting.jpg!
</center>

h1. Assembly line analogy

<center>
!images/assembly.jpg!
</center>

h1. Assembly line analogy

h3. 12.5 man hours using traditional method

h1. Assembly line analogy

h3. 1 hour 33 minutes using assembly line

h1. Assembly line analogy

h3. Paint became the bottleneck

h1. Characteristics

<center>
!images/dumbo.png!
</center>

h1. Single thread

<center>
!images/thread.jpg!
</center>

h1. Non-blocking/asynchronous

<center>
!images/block.png!
</center>

h1. Lower/predictable resource consumption

<center>
!images/nginx_connections.png!
</center>

"http://blog.webfaction.com/a-little-holiday-present":http://blog.webfaction.com/a-little-holiday-present

h1. Event driven web servers

  * NGINX
  * Thin
  * Tornado
  * Lighttpd

h1. Event driven web servers

h2. Who uses them

  * Youtube
  * Wikipedia
  * Wordpress
  * Hulu
  * Github

h1. Benefits

<center>
!images/bennys.jpg!
</center>

h1. High concurrency

<center>
!images/concurrency.png!
</center>

h1. Low resource consumption

<center>
!images/consume.jpg!
</center>

h1. Predictable resource consumption

<center>
!images/psychic.jpg!
</center>

h1. Er... I mean, predictable resource consumption

<p>&nbsp;</p>

<center>
!images/nginx_connections.png!
</center>

"http://blog.webfaction.com/a-little-holiday-present":http://blog.webfaction.com/a-little-holiday-present

h1. Event driven frameworks

  * Node.js
  * EventMachine
  * Twisted
  * Prado

h1. Event driven frameworks

h2. Who uses them

  * Heroku
  * Adcloud
  * Joyent
  * Academia.edu

h1. Benefits

<center>
!images/bennys.jpg!
</center>

h1. High concurrency

<center>
!images/scalable.jpg!
</center>

h1. Streaming

<center>
!images/data_stream.jpg!
</center>

h1. Real-time

<center>
!images/clock.png!
</center>

h1. Examples

h2. Node.js netstat 'tailer'

<% code do %>var sys = require('sys')
var spawn = require('child_process').spawn;

// spawn my netstat process
var netstat = spawn("netstat", ["-a", "--inet", "-c"]);

// print netstat results to command line
netstat.stdout.on("data", function (data) {
  sys.puts(data);
});

// require http lib
var http = require("http");
http.createServer(function(req,res){
  // send header
  res.writeHead(200,{"Content-Type": "text/plain"});
  // send output of netstat
  netstat.stdout.on("data", function (data) {
    res.write(data);
  });
}).listen(8000);

<% end %>

h1. Examples

h2. Node.js netstat 'tailer'

<center>
!images/netstat.png!
</center>

h1. Hummingbird

 * Node.js
 * MongoDB
 * WebSockets

h1. Hummingbird

<center>
<object width="640" height="480"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=11613517&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=11613517&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="640" height="480"></embed></object><p><a href="http://vimeo.com/11613517">Hummingbird</a> from <a href="http://vimeo.com/user437656">Michael Nutt</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
</center>

h1. Examples

<center>
<video src="videos/experimenting_with_node.ogv" controls></video>
</center>

h1. Bonus!

<center>
!images/bonus.png!
</center>

h1. AMQP

<center>
!images/amqp.png!
</center>

h1. AMQP

 * Advanced
 * Message
 * Queuing
 * Protocol

h1. General purpose messaging bus

<center>
!images/amqp.png!
</center>

h1. Developed by JPMorgan Chase & Co.

<center>
!images/jpm.png!
</center>

h1. Open standard

<center>
!images/open.jpg!
</center>

h1. Messaging scenarios

 * point to point
 * one to many
 * pub-sub
 * high speed transient
 * etc

h1. Multiple implementations

  * RabbitMQ
  * OpenAMQ
  * StormMQ
  * Apache Qpid
  * etc

h1. Language support

<center>
!images/code.jpg!
</center>

h1. Designed for critical communications

<center>
!images/dollar.jpg!
</center>

h1. Persistence

<center>
!images/ant.jpg!
</center>

h1. Scalability

<center>
!images/scalable.jpg!
</center>

h1. Sample publisher/consumer

AMQP publisher

<% code do %>require 'amqp'

AMQP.start(:host => 'localhost') do
  # create a fanout exchange on the broker
  exchange = MQ.new.fanout('multicast')

  # publish multiple messages to fanout
  exchange.publish('hello world')
end
<% end %>

AMQP consumer

<% code do %>require 'amqp'

AMQP.start(:host => 'localhost') do
  amq = MQ.new

  # bind 'listener' queue to 'multicast' exchange
  amq.queue('listener').bind(amq.fanout('multicast')).subscribe do |msg|
    puts msg # process your message here
  end
end
<% end %>

h1. Use cases

<center>
!images/ducttape.png!
</center>

h1. Use cases

h2. Pub-sub

<center>
!images/subscriber.jpg!
</center>

h1. Use cases

h2. Communications Hub

<center>
!images/email.png!
</center>

h1. Use cases

h2. Work distribution

<center>
!images/workers.jpg!
</center>

h1. XMPP - The alternative

<center>
!images/xmpp.jpg!
</center>

h1. I’m not delusional

<center>
!images/cuckoo.jpg!
</center>

h1. Just because it's new doesn't mean it's better

<center>
!images/better.jpg!
</center>

h1. These aren't replacements (mostly)

<center>
!images/replace.jpg!
</center>

h1. There are downsides

<center>
!images/sadtrombone.jpg!
</center>

h1. Where can these fit in?

<center>
!images/russian-tetris.gif!
</center>

