title: In with the new
code-theme: blackboard

h1. Who am I?

<center>
!images/code_monkey.jpg!
</center>

h1. Where do I hail from?

<center>
!images/road_warrior.jpg!
</center>

h1. What do we do?

<center>
!images/question.jpg!
</center>

h1. What kind of stuff do I work with?

<center>
!images/python.gif!
!images/ruby.gif!
!images/php.gif!
!images/vmware.gif!
!images/rails.png!
!images/django.gif!
!images/jquery.gif!
!images/node.png!
!images/mongodb.png!
!images/redis.gif!
</center>

h1. What is this talk about?

!images/what.png!

h1. What is this talk about?

h2. continued

<p>&nbsp;</p>

<ul>
<li>Distributed Version Control</li>
<li>NoSQL</li>
<li>Web Frameworks</li>
<li>Event Driven Servers</li>
<li>Message Queue Servers</li>
</ul>

h1. Not "out with the old"

<center>
!images/hulk.jpg!
</center>

h1. Do I actually use any of this stuff?

<center>
!images/wrench.jpg!
</center>

h1. Distributed Version Control

<center>
!images/distributed.gif!
</center>

h1. Centralized Model

<center>
!images/traditional_vc.png!
</center>

h1. Centralized SCM systems

  * CVS
  * Subversion
  * ClearCase
  * Perforce
  * Visual Studio Team System

h1. One master copy

<center>
!images/master.jpg!
</center>

h1. All collaborators work on the same repository

<center>
!images/collaborators.jpg!
</center>

h1. Network is required for most operations

<center>
!images/internet.jpg!
</center>

h1. Distributed Model

<center>
!images/distributed_vc.png!
</center>

h1. Distributed SCM systems

  * Git
  * Mercurial
  * Arch
  * Bazaar
  * Darcs
  * Bitkeeper

h1. Multiple "masters"

<center>
!images/masters.jpg!
</center>

h1. Everyone works on their own copy of the repository

<p>&nbsp;</p>

<center>
!images/everymanforhimself.jpg!
</center>

h1. No network needed

<center>
!images/nonetwork.jpg!
</center>

h1. It's not too late, convert today!

<center>
!images/conversion.jpg!
</center>

h1. No platform left behind

<center>
!images/linux.jpg!
!images/osx.jpg!

!images/windows.jpg!
!images/bsd.jpg!
</center>

h1. Command line utils

<center>
!images/commandline.png!
</center>

h1. GUI utils

<center>
!images/tortoise.jpg!
</center>

h1. Cryptographic history

<center>
!images/crypto.png!
</center>

h1. Simplified branching

<p>&nbsp;</p>

<center>
!images/branching.png!
</center>

h1. Why you should consider DVCS

<center>
!images/consider.jpg!
</center>

h1. Redundancy

<center>
!images/redundant.jpg!
</center>

h1. No network needed

<p>&nbsp;</p>

<center>
!images/failwhale.gif!
</center>

h1. Encourages commits

<center>
!images/hardwork.jpg!
</center>

h1. Private work environment

<center>
!images/privacy.jpg!
</center>

h1. Still can have an "official" repo

<center>
!images/enforce.jpg!
</center>

h1. Great for large projects

<center>
!images/large.jpg!
</center>

h1. Why you should NOT consider DVCS

<center>
!images/rejected.jpg!
</center>

h1. Centralized systems are getting some of the same features

<center>
!images/steal.jpg!
</center>

h1. Easier to enforce an "official" repo

<center>
!images/official.jpg!
</center>

h1. Can't or won't allow personal copies of repos

<center>
!images/noprivate.jpg!
</center>

!SLIDE

<p>&nbsp;</p>

<center>
!images/nosql.png!
</center>

h1. What is NoSQL?

<center>
!images/what.png!
</center>

h1. Buzzword

<center>
!images/bee.jpg!
</center>

h1. Flexible table schema

<center>
!images/database.jpg!
</center>

h1. Key-value

<center>
!images/key.jpg!
</center>

h1. Key-value

h2. Software

 * MemcacheDB
 * Tokyo Cabinet
 * Redis
 * Amazon SimpleDB

h1. Document oriented

<center>
!images/documents.jpg!
</center>

h1. Document oriented

h2. Software

 * MongoDB
 * CouchDB
 * RavenDB

h1. Column oriented

<center>
!images/column.jpg!
</center>

h1. Column oriented

h2. Software

 * LucidDB
 * MonetDB
 * Google BigTable (sort of)

h1. Avoid the join

<center>
!images/join.jpg!
</center>

h1. Polymorphism baby!

<center>
!images/morph.jpg!
</center>

h1. Horizontal scalability

<center>
!images/horizontal.jpg!
</center>

h1. Weak/eventual consistency

<center>
!images/consistent.jpg!
</center>

h1. Why you should consider NoSQL

<center>
!images/consider.jpg!
</center>

h1. Performance

<center>
!images/performance.jpg!
</center>

h1. Scalability

<center>
!images/scalable.jpg!
</center>

h1. (auto)Sharding

<center>
!images/sharding.jpg!
</center>

h1. Simplified replication

<center>
!images/replicant.jpg!
</center>

h1. Versatile

<center>
!images/versatile.jpg!
</center>

h1. Why you should NOT consider NoSQL

<center>
!images/rejected.jpg!
</center>

h1. Doesn't fit

<center>
!images/fit.jpg!
</center>

h1. Need complex joins/business logic

<center>
!images/joins.jpg!
</center>

h1. Need ODBC

<center>
!images/odbc.jpg!
</center>

h1. Weak/eventual consistency

<center>
!images/consistency.jpg!
</center>

h1. Web frameworks

<center>
!images/wordle.png!
</center>

h1. Design philosophy

<center>
!images/design.jpg!
</center>

h1. DRY

 * Don't

 * Repeat

 * Yourself

h1. ORM

 * Object

 * Relational

 * Mapping

h1. ORM

h2. Abstraction over data

<center>
!images/orm.jpg!
</center>

h1. ORM

h2. No SQL statements(mostly)

Instead of your code looking like this

<% code do %>res = mysql.query("SELECT * FROM PEOPLE")
res.each do |row|
  puts row['first_name'] + " " + row['last_name']
end
<% end %>

It will look something like this

<% code do %>people = Person.find(:all)

people.each do |person|
  puts person.first_name + " " + person.last_name
end
<% end %>

h1. ORM

h2. Inserts

Instead of your code looking like this

<% code do %>mysql.query("INSERT INTO people(first_name, last_name)
  VALUES ('Schmoe', 'Joe')");
<% end %>

It will look something like this

<% code do %>Person.create({:first_name => 'Joe', :last_name => 'Schmoe'})
<% end %>

h1. Templating

<center>
!images/erb.png!
</center>

h1. What is MVC?

<center>
!images/mvc.png!
</center>

h1. Model

<center>
!images/data.jpg!
</center>

h1. Model

h2. Data

<center>
!images/matrix.jpg!
</center>

h1. Model

h2. Business logic

<% code do %>
class Album < ActiveRecord::Base
    has_many :tracks
end

class Track < ActiveRecord::Base
    belongs_to :album
end

album = Album.create(:title => 'Black and Blue',
    :performer => 'The Rolling Stones')
album.tracks.create(:track_number => 1, :title => 'Hot Stuff')

album = Album.create(:title => 'Sticky Fingers',
    :performer => 'The Rolling Stones')
album.tracks.create(:track_number => 1, :title => 'Brown Sugar')

puts Album.find_by_title('Sticky Fingers').title  # Sticky Fingers
puts Track.find_by_title('Hot Stuff').album_id    # 1
<% end %>

h1. View

<center>
!images/surfin.jpg!
</center>

h1. View

h2. Presentation

<center>
!images/optimus.jpg!
</center>

h1. View

h2. “The Web”

<center>
!images/website.jpg!
</center>

h1. Controller

<center>
!images/vader.jpg!
</center>

h1. Controller

h2. The tie that binds

<center>
!images/controller.jpg!
</center>

h1. Controller

h2. Flow control

<center>
!images/flow.jpg!
</center>

h1. JavaScript

<% code do %><script language="javascript" type="text/javascript">
  alert("I'm not so bad");
</script>
<% end %>

h1. JavaScript

h2. DOM

<center>
!images/html.svg!
</center>

h1. JavaScript

h2. Accessibility/Unobtrusive scripting

The "obtrusive" way:

<% code do %><script language="javascript">
function doSomething(){
	// Do something here!
	alert('You did something, woo hoo!');
});
</script>

<a onclick="doSomething()" href="#">Click!</a><% end %>

The unobtrusive way:

<% code do %><a href="backuplink.html" class="doSomething">Click!</a>
<script language="javascript">$('a.doSomething').click(function(){
	// Do something here!
	alert('You did something, woo hoo!');
});
</script><% end %>

h1. JavaScript

h2. Degrade gracefully

<center>
!images/degrade.gif!
</center>

h1. JavaScript

h2. Compatibility

!images/modernizer.png!

<% code do %>.multiplebgs div p {
  /* properties for browsers that
     support multiple backgrounds */
}
.no-multiplebgs div p {
  /* optional fallback properties
     for browsers that don't */
}<% end %>

<% code do %>if (Modernizr.video && Modernizr.video.ogg){
  // preload ogg video assets
} else if (Modernizr.video && Modernizr.video.h264){
  // preload h264 assets
}<% end %>

h1. JavaScript

h2. Cross browser

<center>
!images/browsers.jpg!
</center>

h1. JavaScript

h2. Cross browser

h3. John Resig == The Debil?

<center>
!images/resig.jpg!
</center>

h1. JavaScript

h2. Rich interfaces

<center>
!images/rich.png!
</center>

h1. Technologies

<center>
!images/calc.jpg!
</center>

h1. MVC

 * Rails
 * Sinatra
 * Django
 * CakePHP
 * CodeIgniter
 * Limonade

h1. Javascript

 * jQuery
 * Prototype
 * ExtJS
 * Mootools
 * Modernizr

h1. What do these buy you?

<center>
!images/money.jpg!
</center>

h1. Heavy lifting

<center>
!images/loader.png!
</center>

h1. Heavy lifting

h2. Example

<% code do %>ray@itconf:~$ rails new my_sweet_web_app
      create
      create  README
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/views/layouts/application.html.erb
      create  app/models
      create  config
      create  db
      create  db/seeds.rb
      create  doc
      create  doc/README_FOR_APP
      create  lib
      create  lib/tasks
      create  lib/tasks/.gitkeep
      ...
      create  vendor/plugins
      create  vendor/plugins/.gitkeep
ray@itconf:~$
<% end %>

h1. Heavy lifting

h2. App structure

<% code do %>.
├── app
│   ├── controllers
│   ├── helpers
│   ├── models
│   └── views
├── config
├── config.ru
├── db
│   └── seeds.rb
├── Gemfile
├── lib
│   └── tasks
├── Rakefile
├── README
├── script
│   └── rails
├── tmp
│   ├── cache
│   ├── pids
│   ├── sessions
│   └── sockets
└── vendor
    └── plugins

<% end %>

h1. A circle of trust

h2. Not really, it's just an expression

<center>
!images/trust.jpg!
</center>

h1. Flexibility

<center>
!images/flex.jpg!
</center>

h1. Time

<center>
!images/time.jpg!
</center>

h1. Time

h2. Code Reuse(DRY)

<center>
!images/cp.jpg!
</center>

h1. Time

h2. Code Reuse(Plugins)

<center>
!images/plugins.jpg!
</center>

h1. Time

h2. Conventions

<center>
!images/difficulties.jpg!
</center>

h1. Why you should consider web frameworks

<center>
!images/consider.jpg!
</center>

h1. Do more with less

<center>
!images/more.jpg!
</center>

h1. Plugin architecture

<center>
!images/plugin.png!
</center>

h1. Standards Compliance

h2. With less headaches

<center>
!images/acid.png!
</center>

h1. Great community

<center>
!images/party.jpg!
</center>

h1. Why you should NOT consider web frameworks

<center>
!images/rejected.jpg!
</center>

h1. They do(meddle) too much for your tastes

<center>
!images/meddle.jpg!
</center>

h1. Learning curve

<center>
!images/curves.jpg!
</center>

h1. Work flow

<center>
!images/work.jpg!
</center>

h1. Concerns about lock-in

<center>
!images/lockin.jpg!
</center>

h1. Event driven architectures

<center>
!images/assembly.jpg!
</center>

h1. Event driven architectures

<center>
!images/police.jpg!
</center>

h1. c10k Problem

<center>
!images/crowd.jpg!
</center>

h1. Single thread

<center>
!images/thread.jpg!
</center>

h1. Non-blocking/asynchronous

<center>
!images/block.png!
</center>

h1. Lower/predictable resource consumption

<center>
!images/nginx_connections.png!
</center>

h1. Assembly line analogy

<center>
!images/assembly.jpg!
</center>

h1. Assembly line analogy

h3. 12.5 man hours using traditional method

h1. Assembly line analogy

h3. 1 hour 33 minutes using assembly line

h1. Assembly line analogy

h3. Paint became the bottleneck

h1. Event driven servers

  * NGINX
  * Thin
  * Tornado
  * Lighttpd

h1. Event driven servers

h2. Who uses them

  * Youtube
  * Wikipedia
  * Wordpress
  * Hulu
  * Github

h1. Benefits

<center>
!images/bennys.jpg!
</center>

h1. High concurrency

<center>
!images/concurrency.png!
</center>

h1. Low resource consumption

<center>
!images/consume.jpg!
</center>

h1. Predictable resource consumption

<center>
!images/psychic.jpg!
</center>

h1. Er... I mean, predictable resource consumption

<p>&nbsp;</p>

<center>
!images/nginx_connections.png!
</center>

h1. Event driven frameworks

  * Node.js
  * EventMachine
  * Twisted
  * Prado

h1. Event driven frameworks

h2. Who uses them

  * Heroku
  * Adcloud
  * Joyent
  * Academia.edu

h1. Benefits

<center>
!images/bennys.jpg!
</center>

h1. Focus on scability

<center>
!images/scalable.jpg!
</center>

h1. Streaming

<center>
!images/data_stream.jpg!
</center>

h1. Real-time

<center>
!images/clock.png!
</center>

h1. Examples

h2. Node.js netstat 'tailer'

<% code do %>var sys = require('sys')
var spawn = require('child_process').spawn;

// spawn my netstat process
var netstat = spawn("netstat", ["-a", "--inet", "-c"]);

// print netstat results to command line
netstat.stdout.on("data", function (data) {
  sys.puts(data);
});

// require http lib
var http = require("http");
http.createServer(function(req,res){
  // send header
  res.writeHead(200,{"Content-Type": "text/plain"});
  // send output of netstat
  netstat.stdout.on("data", function (data) {
    res.write(data);
  });
}).listen(8000);

<% end %>

h1. Examples

h2. Node.js netstat 'tailer'

<center>
!images/netstat.png!
</center>

h1. Hummingbird

<center>
<object width="640" height="480"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=11613517&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=11613517&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="640" height="480"></embed></object><p><a href="http://vimeo.com/11613517">Hummingbird</a> from <a href="http://vimeo.com/user437656">Michael Nutt</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
</center>

h1. Message queues

<center>
!images/amqp.png!
</center>

